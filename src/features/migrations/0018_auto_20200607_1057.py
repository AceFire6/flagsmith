# Generated by Django 2.2.13 on 2020-06-07 10:57

from django.db import migrations


def migrate_feature_segments_forward(apps, schema_editor):
    FeatureSegment = apps.get_model('features', 'FeatureSegment')

    feature_segments_to_create = []
    # iterate over all current feature segments and ensure that one exists for all environments in it's project
    for feature_segment in FeatureSegment.objects.all():
        for idx, environment in enumerate(feature_segment.feature.project.environments.all()):
            # update the existing feature segment with the first environment and then create new feature segments
            # for the remaining environments
            if idx == 0:
                feature_segment.environment = environment
                feature_segment.save()
            else:
                # create a copy of the feature segment by just setting the pk to None
                new_feature_segment = feature_segment
                new_feature_segment.pk = None
                new_feature_segment.environment = environment

                feature_segments_to_create.append(new_feature_segment)

    FeatureSegment.objects.bulk_create(feature_segments_to_create)

    assert not FeatureSegment.objects.filter(environment__isnull=True).exists()


def migrate_feature_segments_reverse(apps, schema_editor):
    """
    Reverse the above by making feature segments unique to a feature again.

    NOTE: THIS WILL RESULT IN A LOSS OF DATA!
    There is no way to determine which 'value' should be kept for a feature segment so we blindly just delete all but
    one of the feature segments. This has to be done due to the uniqueness constraint to ensure that we can still
    migrate backwards.
    """
    FeatureSegment = apps.get_model('features', 'FeatureSegment')
    Feature = apps.get_model('features', 'Feature')

    for feature in Feature.objects.filter(feature_segments__isnull=False).prefetch_related('feature_segments'):
        first_feature_segment = feature.feature_segments.first()
        FeatureSegment.objects.filter(feature=feature).exclude(pk=first_feature_segment.pk).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('features', '0017_auto_20200607_1005'),
    ]

    operations = [
        migrations.RunPython(
            migrate_feature_segments_forward, reverse_code=migrate_feature_segments_reverse
        ),
    ]

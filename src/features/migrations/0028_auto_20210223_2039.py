# Generated by Django 2.2.17 on 2021-02-23 20:39

import logging

from django.db import migrations

from features.value_types import BOOLEAN, INTEGER

logger = logging.getLogger(__name__)


def create_or_update_feature_state_values_for_feature_segments(apps, schema_editor):
    """
    Create / Update the FeatureStateValue object for all FeatureSegments
    that currently exist.
    """

    FeatureSegment = apps.get_model("features", "FeatureSegment")
    FeatureState = apps.get_model("features", "FeatureState")
    FeatureStateValue = apps.get_model("features", "FeatureStateValue")

    for feature_segment in FeatureSegment.objects.all():
        try:
            feature_state = FeatureState.objects.get(feature_segment=feature_segment)
            value_key = {
                INTEGER: "integer_value",
                BOOLEAN: "boolean_value"
            }.get(feature_segment.value_type, "string_value")
            FeatureStateValue.objects.update_or_create(
                feature_state=feature_state,
                defaults={
                    "type": feature_segment.value_type,
                    value_key: feature_segment.value,
                },
            )
        except FeatureState.DoesNotExist:
            logger.error(
                "FeatureState didn't exist for FeatureSegment %d" % feature_segment.id
            )
            continue


def reverse(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("features", "0027_merge_20210215_1059"),
    ]

    operations = [
        migrations.RunPython(
            create_or_update_feature_state_values_for_feature_segments,
            reverse_code=reverse,
        )
    ]
